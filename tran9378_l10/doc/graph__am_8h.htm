<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.7"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>CP264: Lab 10: src/graph_am.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">CP264: Lab 10<span id="projectnumber">&#160;2025-01-05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.7 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('graph__am_8h.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">graph_am.h File Reference</div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;stdio.h&gt;</code><br />
<code>#include &lt;stdlib.h&gt;</code><br />
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgraph__am__pair.htm">graph_am_pair</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgraph__am.htm">graph_am</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:afa8ec44ac0e6dd1e65b5c86f726c5db5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structgraph__am.htm">graph_am</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="graph__am_8h.htm#afa8ec44ac0e6dd1e65b5c86f726c5db5">graph_am_initialize</a> (int size)</td></tr>
<tr class="separator:afa8ec44ac0e6dd1e65b5c86f726c5db5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad850f093170e8368a9b771f32caf0533"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="graph__am_8h.htm#ad850f093170e8368a9b771f32caf0533">graph_am_free</a> (<a class="el" href="structgraph__am.htm">graph_am</a> **source)</td></tr>
<tr class="separator:ad850f093170e8368a9b771f32caf0533"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2836c7baf88b16f03d1c5f745c180225"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="graph__am_8h.htm#a2836c7baf88b16f03d1c5f745c180225">graph_am_add_vertice</a> (<a class="el" href="structgraph__am.htm">graph_am</a> *source, const <a class="el" href="structgraph__am__pair.htm">graph_am_pair</a> *pair)</td></tr>
<tr class="separator:a2836c7baf88b16f03d1c5f745c180225"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acaadc77b9039a3af696880c692eaedc9"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="graph__am_8h.htm#acaadc77b9039a3af696880c692eaedc9">graph_am_remove_vertice</a> (<a class="el" href="structgraph__am.htm">graph_am</a> *source, const <a class="el" href="structgraph__am__pair.htm">graph_am_pair</a> *pair)</td></tr>
<tr class="separator:acaadc77b9039a3af696880c692eaedc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87b9188c0f57a08fcfd1cc21dd9453dc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structgraph__am.htm">graph_am</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="graph__am_8h.htm#a87b9188c0f57a08fcfd1cc21dd9453dc">graph_am_create</a> (int size, const <a class="el" href="structgraph__am__pair.htm">graph_am_pair</a> pairs[], int count)</td></tr>
<tr class="separator:a87b9188c0f57a08fcfd1cc21dd9453dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace68b6d5999f31b11e492c1976cd71cd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="graph__am_8h.htm#ace68b6d5999f31b11e492c1976cd71cd">graph_am_neighbours</a> (const <a class="el" href="structgraph__am.htm">graph_am</a> *source, int vertex, int vertices[], int *count)</td></tr>
<tr class="separator:ace68b6d5999f31b11e492c1976cd71cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a847dea266d434e0f2d06e0aa3f4070f6"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="graph__am_8h.htm#a847dea266d434e0f2d06e0aa3f4070f6">graph_am_degree</a> (const <a class="el" href="structgraph__am.htm">graph_am</a> *source, int vertex)</td></tr>
<tr class="separator:a847dea266d434e0f2d06e0aa3f4070f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdaac76bd1bc6a2644949fc3425a41b3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="graph__am_8h.htm#afdaac76bd1bc6a2644949fc3425a41b3">graph_am_breadth_traversal</a> (const <a class="el" href="structgraph__am.htm">graph_am</a> *source, int vertex, int vertices[], int *count)</td></tr>
<tr class="separator:afdaac76bd1bc6a2644949fc3425a41b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac846cc6cd8f9718a5bd8385cea394eee"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="graph__am_8h.htm#ac846cc6cd8f9718a5bd8385cea394eee">graph_am_depth_traversal</a> (const <a class="el" href="structgraph__am.htm">graph_am</a> *source, int vertex, int vertices[], int *count)</td></tr>
<tr class="separator:ac846cc6cd8f9718a5bd8385cea394eee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebf8beeb733c63b5c474093cfc3f97ad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="graph__am_8h.htm#aebf8beeb733c63b5c474093cfc3f97ad">graph_am_print</a> (const <a class="el" href="structgraph__am.htm">graph_am</a> *source)</td></tr>
<tr class="separator:aebf8beeb733c63b5c474093cfc3f97ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><hr  />
<h2><a class="anchor" id="autotoc_md4"></a>
Adjacency Matrix Graph Header File</h2>
<dl class="section author"><dt>Author</dt><dd>David Brown, 123456789, <a href="#" onclick="location.href='mai'+'lto:'+'dbr'+'ow'+'n@w'+'lu'+'.ca'; return false;">dbrow<span class="obfuscator">.nosp@m.</span>n@wl<span class="obfuscator">.nosp@m.</span>u.ca</a></dd></dl>
<dl class="section version"><dt>Version</dt><dd>2025-01-06</dd></dl>
<hr  />
<p> DO NOT CHANGE CONTENTS </p>
</div><h2 class="groupheader">Function Documentation</h2>
<a id="a2836c7baf88b16f03d1c5f745c180225" name="a2836c7baf88b16f03d1c5f745c180225"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2836c7baf88b16f03d1c5f745c180225">&#9670;&#160;</a></span>graph_am_add_vertice()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int graph_am_add_vertice </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structgraph__am.htm">graph_am</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structgraph__am__pair.htm">graph_am_pair</a> *&#160;</td>
          <td class="paramname"><em>pair</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Adds a vertice to source. Fails if pair values invalid or vertice already in source. Pairs containing row &lt; 0 or row &gt;= size are ignored; Pairs containing col &lt; 0 or col &gt;= size are ignored; Pairs containing row == col are a loop and are given a value of 2; All other pairs are given a value of 1 in [row][col] and [col][row].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a graph </td></tr>
    <tr><td class="paramname">pair</td><td>- pointer to vertice to add to source </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- 1 if the vertice was added, 0 otherwise </dd></dl>

</div>
</div>
<a id="afdaac76bd1bc6a2644949fc3425a41b3" name="afdaac76bd1bc6a2644949fc3425a41b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afdaac76bd1bc6a2644949fc3425a41b3">&#9670;&#160;</a></span>graph_am_breadth_traversal()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void graph_am_breadth_traversal </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structgraph__am.htm">graph_am</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>vertex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>vertices</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Performs a breadth-first traversal of a graph. Copies</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a graph </td></tr>
    <tr><td class="paramname">vertex</td><td>- index of a vertex to start traversal from </td></tr>
    <tr><td class="paramname">vertices</td><td>- array of resulting vertices </td></tr>
    <tr><td class="paramname">count</td><td>- number of items in vertices </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a87b9188c0f57a08fcfd1cc21dd9453dc" name="a87b9188c0f57a08fcfd1cc21dd9453dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87b9188c0f57a08fcfd1cc21dd9453dc">&#9670;&#160;</a></span>graph_am_create()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structgraph__am.htm">graph_am</a> * graph_am_create </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structgraph__am__pair.htm">graph_am_pair</a>&#160;</td>
          <td class="paramname"><em>pairs</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Creates a graph from an array of vertex pairs. Pairs containing row &lt; 0 or row &gt;= size are ignored; Pairs containing col &lt; 0 or col &gt;= size are ignored; Pairs containing row == col are a loop and is given a value of 2; All other pairs are given a value of 1 in [row][col] and [col][row]. The resulting matrix is symmetrical.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a graph </td></tr>
    <tr><td class="paramname">pairs</td><td>- array of vertex pairs </td></tr>
    <tr><td class="paramname">count</td><td>- number of values in pairs </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a847dea266d434e0f2d06e0aa3f4070f6" name="a847dea266d434e0f2d06e0aa3f4070f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a847dea266d434e0f2d06e0aa3f4070f6">&#9670;&#160;</a></span>graph_am_degree()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int graph_am_degree </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structgraph__am.htm">graph_am</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>vertex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns number of vertices connected to vertex.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a graph </td></tr>
    <tr><td class="paramname">vertex</td><td>- index of a vertex </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- number of vertices connected to vertex </dd></dl>

</div>
</div>
<a id="ac846cc6cd8f9718a5bd8385cea394eee" name="ac846cc6cd8f9718a5bd8385cea394eee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac846cc6cd8f9718a5bd8385cea394eee">&#9670;&#160;</a></span>graph_am_depth_traversal()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void graph_am_depth_traversal </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structgraph__am.htm">graph_am</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>vertex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>vertices</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Performs a depth-first traversal of a graph.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a graph </td></tr>
    <tr><td class="paramname">vertex</td><td>- index of a vertex to start traversal from </td></tr>
    <tr><td class="paramname">vertices</td><td>- array of resulting vertices </td></tr>
    <tr><td class="paramname">count</td><td>- number of items in vertices </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad850f093170e8368a9b771f32caf0533" name="ad850f093170e8368a9b771f32caf0533"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad850f093170e8368a9b771f32caf0533">&#9670;&#160;</a></span>graph_am_free()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void graph_am_free </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structgraph__am.htm">graph_am</a> **&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Frees the contents of an adjacency matrix graph.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a graph </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="afa8ec44ac0e6dd1e65b5c86f726c5db5" name="afa8ec44ac0e6dd1e65b5c86f726c5db5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa8ec44ac0e6dd1e65b5c86f726c5db5">&#9670;&#160;</a></span>graph_am_initialize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structgraph__am.htm">graph_am</a> * graph_am_initialize </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Initializes an adjacency matrix graph.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a graph </td></tr>
    <tr><td class="paramname">size</td><td>- height and width of the graph matrix </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ace68b6d5999f31b11e492c1976cd71cd" name="ace68b6d5999f31b11e492c1976cd71cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace68b6d5999f31b11e492c1976cd71cd">&#9670;&#160;</a></span>graph_am_neighbours()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void graph_am_neighbours </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structgraph__am.htm">graph_am</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>vertex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>vertices</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns an array of all vertices connected to a vertex. vertices must be defined with a size of source-&gt;size.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a graph </td></tr>
    <tr><td class="paramname">vertex</td><td>- index of a vertex </td></tr>
    <tr><td class="paramname">vertices</td><td>- array of neighbours </td></tr>
    <tr><td class="paramname">count</td><td>- number of vertices </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aebf8beeb733c63b5c474093cfc3f97ad" name="aebf8beeb733c63b5c474093cfc3f97ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebf8beeb733c63b5c474093cfc3f97ad">&#9670;&#160;</a></span>graph_am_print()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void graph_am_print </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structgraph__am.htm">graph_am</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>FOR TESTING Prints the contents of an adjacency matrix graph.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a graph </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="acaadc77b9039a3af696880c692eaedc9" name="acaadc77b9039a3af696880c692eaedc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acaadc77b9039a3af696880c692eaedc9">&#9670;&#160;</a></span>graph_am_remove_vertice()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int graph_am_remove_vertice </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structgraph__am.htm">graph_am</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structgraph__am__pair.htm">graph_am_pair</a> *&#160;</td>
          <td class="paramname"><em>pair</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Removes an vertice from source. Fails if pair values invalid or vertice not in source. Pairs containing row &lt; 0 or row &gt;= size are ignored; Pairs containing col &lt; 0 or col &gt;= size are ignored;</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a graph </td></tr>
    <tr><td class="paramname">pair</td><td>- pointer to vertice to remove from source </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- 1 if the vertice was removed, 0 otherwise </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.htm">src</a></li><li class="navelem"><a class="el" href="graph__am_8h.htm">graph_am.h</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.7 </li>
  </ul>
</div>
</body>
</html>
