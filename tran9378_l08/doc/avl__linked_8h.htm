<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.7"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>CP264: Lab 8: src/avl_linked.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">CP264: Lab 8<span id="projectnumber">&#160;2025-01-05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.7 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('avl__linked_8h.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">avl_linked.h File Reference</div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;stdio.h&gt;</code><br />
<code>#include &lt;stdlib.h&gt;</code><br />
<code>#include &lt;string.h&gt;</code><br />
<code>#include &quot;<a class="el" href="data_8h.htm">data.h</a>&quot;</code><br />
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_a_v_l___n_o_d_e.htm">AVL_NODE</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structavl__linked.htm">avl_linked</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a61c85d79180ecc7636caeaa4fc6c4d67"><td class="memItemLeft" align="right" valign="top">typedef enum <a class="el" href="avl__linked_8h.htm#a0309ee1cd3187365a87f3ec31cdfcab6">AVL_ERROR</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#a61c85d79180ecc7636caeaa4fc6c4d67">AVL_ERROR</a></td></tr>
<tr class="separator:a61c85d79180ecc7636caeaa4fc6c4d67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fcc94a84aff4d8a76971f90c8029fa7"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="struct_a_v_l___n_o_d_e.htm">AVL_NODE</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#a9fcc94a84aff4d8a76971f90c8029fa7">avl_node</a></td></tr>
<tr class="separator:a9fcc94a84aff4d8a76971f90c8029fa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="enum-members" name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a0309ee1cd3187365a87f3ec31cdfcab6"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#a0309ee1cd3187365a87f3ec31cdfcab6">AVL_ERROR</a> { <a class="el" href="avl__linked_8h.htm#a0309ee1cd3187365a87f3ec31cdfcab6a90213439b09afc9a0a5ce8ad0b4f456c">AVL_VALID</a>
, <a class="el" href="avl__linked_8h.htm#a0309ee1cd3187365a87f3ec31cdfcab6ad32d190777f333e647d291419cc18f32">AVL_BAD_CHILDREN</a>
, <a class="el" href="avl__linked_8h.htm#a0309ee1cd3187365a87f3ec31cdfcab6a41dd57d1e518b8d92dde36f8d948bd61">AVL_HEIGHT_VIOLATION</a>
, <a class="el" href="avl__linked_8h.htm#a0309ee1cd3187365a87f3ec31cdfcab6adbce0ce07d0b9c156c58b3cd6d8580d6">AVL_NOT_BALANCED</a>
 }</td></tr>
<tr class="separator:a0309ee1cd3187365a87f3ec31cdfcab6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a218fda02e3c76d7889603164559878e9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#a218fda02e3c76d7889603164559878e9">avl_initialize</a> ()</td></tr>
<tr class="separator:a218fda02e3c76d7889603164559878e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42d1fef4963c84bb8930301efead28c9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#a42d1fef4963c84bb8930301efead28c9">avl_free</a> (<a class="el" href="structavl__linked.htm">avl_linked</a> **source)</td></tr>
<tr class="separator:a42d1fef4963c84bb8930301efead28c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab033d5a6f08cf6912be76b5402d8262e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#ab033d5a6f08cf6912be76b5402d8262e">avl_empty</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *source)</td></tr>
<tr class="separator:ab033d5a6f08cf6912be76b5402d8262e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca8d939577af3166168cd5485285ad17"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#aca8d939577af3166168cd5485285ad17">avl_full</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *source)</td></tr>
<tr class="separator:aca8d939577af3166168cd5485285ad17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae57090b13d4e91d063a11904c30e3b4"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#aae57090b13d4e91d063a11904c30e3b4">avl_count</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *source)</td></tr>
<tr class="separator:aae57090b13d4e91d063a11904c30e3b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0897b639673a390298a446738e8d522"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#ad0897b639673a390298a446738e8d522">avl_insert</a> (<a class="el" href="structavl__linked.htm">avl_linked</a> *source, const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:ad0897b639673a390298a446738e8d522"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27e8fd44b896b789491e6ea620b20fc0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#a27e8fd44b896b789491e6ea620b20fc0">avl_retrieve</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> key, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:a27e8fd44b896b789491e6ea620b20fc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50642cde96d52eb59ceaeb16afcbd9af"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#a50642cde96d52eb59ceaeb16afcbd9af">avl_remove</a> (<a class="el" href="structavl__linked.htm">avl_linked</a> *source, const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> key, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:a50642cde96d52eb59ceaeb16afcbd9af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a377dded21fffb51121d4313ae27ebd6e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#a377dded21fffb51121d4313ae27ebd6e">avl_copy</a> (<a class="el" href="structavl__linked.htm">avl_linked</a> **target, const <a class="el" href="structavl__linked.htm">avl_linked</a> *source)</td></tr>
<tr class="separator:a377dded21fffb51121d4313ae27ebd6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1fd15fc8fa5078325b724066411a101"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#ac1fd15fc8fa5078325b724066411a101">avl_inorder</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *items)</td></tr>
<tr class="separator:ac1fd15fc8fa5078325b724066411a101"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfd4314b277ad2c9a0b8c96092e504c1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#abfd4314b277ad2c9a0b8c96092e504c1">avl_preorder</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *items)</td></tr>
<tr class="separator:abfd4314b277ad2c9a0b8c96092e504c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab54f807bd304760ced088759a9026798"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#ab54f807bd304760ced088759a9026798">avl_postorder</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *items)</td></tr>
<tr class="separator:ab54f807bd304760ced088759a9026798"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3d2344bfc64ca8517d37a2e04b838d5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#ab3d2344bfc64ca8517d37a2e04b838d5">avl_max</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:ab3d2344bfc64ca8517d37a2e04b838d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e9c5eb5c25b94efcc72c9e65934c3e4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#a4e9c5eb5c25b94efcc72c9e65934c3e4">avl_min</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:a4e9c5eb5c25b94efcc72c9e65934c3e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f7e48ca3e109fd2ccb65b38f8239568"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#a1f7e48ca3e109fd2ccb65b38f8239568">avl_leaf_count</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *source)</td></tr>
<tr class="separator:a1f7e48ca3e109fd2ccb65b38f8239568"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5c3473184158a9db80a74c992835983"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#ae5c3473184158a9db80a74c992835983">avl_one_child_count</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *source)</td></tr>
<tr class="separator:ae5c3473184158a9db80a74c992835983"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6334823fea843ff71ca5821b25a71d8"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#af6334823fea843ff71ca5821b25a71d8">avl_two_child_count</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *source)</td></tr>
<tr class="separator:af6334823fea843ff71ca5821b25a71d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fd024d2ebb2c3f4ce0db7d6771e2d3b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#a4fd024d2ebb2c3f4ce0db7d6771e2d3b">avl_node_counts</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *source, int *zero, int *one, int *two)</td></tr>
<tr class="separator:a4fd024d2ebb2c3f4ce0db7d6771e2d3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27b7354d7ad2339a38d061ae3f4c2b70"><td class="memItemLeft" align="right" valign="top"><a class="el" href="avl__linked_8h.htm#a0309ee1cd3187365a87f3ec31cdfcab6">AVL_ERROR</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#a27b7354d7ad2339a38d061ae3f4c2b70">avl_valid</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *source)</td></tr>
<tr class="separator:a27b7354d7ad2339a38d061ae3f4c2b70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae70c6626140a083c3eb66eb949827c16"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#ae70c6626140a083c3eb66eb949827c16">avl_equals</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *target, const <a class="el" href="structavl__linked.htm">avl_linked</a> *source)</td></tr>
<tr class="separator:ae70c6626140a083c3eb66eb949827c16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ee29acd68bdf2874982450eefeaafc1"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#a5ee29acd68bdf2874982450eefeaafc1">avl_error_string</a> (char *string, size_t size, <a class="el" href="avl__linked_8h.htm#a0309ee1cd3187365a87f3ec31cdfcab6">AVL_ERROR</a> error)</td></tr>
<tr class="separator:a5ee29acd68bdf2874982450eefeaafc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c8c077dc75e66afd1dfcbd43d77961d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="avl__linked_8h.htm#a6c8c077dc75e66afd1dfcbd43d77961d">avl_print</a> (const <a class="el" href="structavl__linked.htm">avl_linked</a> *source)</td></tr>
<tr class="separator:a6c8c077dc75e66afd1dfcbd43d77961d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><hr  />
<h2><a class="anchor" id="autotoc_md4"></a>
Linked AVL Header File</h2>
<dl class="section author"><dt>Author</dt><dd>David Brown, 123456789, <a href="#" onclick="location.href='mai'+'lto:'+'dbr'+'ow'+'n@w'+'lu'+'.ca'; return false;">dbrow<span class="obfuscator">.nosp@m.</span>n@wl<span class="obfuscator">.nosp@m.</span>u.ca</a></dd></dl>
<dl class="section version"><dt>Version</dt><dd>2025-01-06</dd></dl>
<hr  />
<p> DO NOT CHANGE CONTENTS </p>
</div><h2 class="groupheader">Typedef Documentation</h2>
<a id="a61c85d79180ecc7636caeaa4fc6c4d67" name="a61c85d79180ecc7636caeaa4fc6c4d67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61c85d79180ecc7636caeaa4fc6c4d67">&#9670;&#160;</a></span>AVL_ERROR</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef enum <a class="el" href="avl__linked_8h.htm#a0309ee1cd3187365a87f3ec31cdfcab6">AVL_ERROR</a> <a class="el" href="avl__linked_8h.htm#a0309ee1cd3187365a87f3ec31cdfcab6">AVL_ERROR</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>AVL validation enum</p>
<p>AVL_VALID - the AVL is valid AVL_BAD_CHILDREN - the AVL violates the AVL rule in terms of parent/child values AVL_HEIGHT_VIOLATION - the AVL violates the AVL rule in terms of parent/child heights AVL_NOT_BALANCED - the AVL is not balanced </p>

</div>
</div>
<a id="a9fcc94a84aff4d8a76971f90c8029fa7" name="a9fcc94a84aff4d8a76971f90c8029fa7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fcc94a84aff4d8a76971f90c8029fa7">&#9670;&#160;</a></span>avl_node</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="struct_a_v_l___n_o_d_e.htm">AVL_NODE</a> <a class="el" href="avl__linked_8h.htm#a9fcc94a84aff4d8a76971f90c8029fa7">avl_node</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>AVL node </p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a0309ee1cd3187365a87f3ec31cdfcab6" name="a0309ee1cd3187365a87f3ec31cdfcab6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0309ee1cd3187365a87f3ec31cdfcab6">&#9670;&#160;</a></span>AVL_ERROR</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="avl__linked_8h.htm#a0309ee1cd3187365a87f3ec31cdfcab6">AVL_ERROR</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>AVL validation enum</p>
<p>AVL_VALID - the AVL is valid AVL_BAD_CHILDREN - the AVL violates the AVL rule in terms of parent/child values AVL_HEIGHT_VIOLATION - the AVL violates the AVL rule in terms of parent/child heights AVL_NOT_BALANCED - the AVL is not balanced </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a0309ee1cd3187365a87f3ec31cdfcab6a90213439b09afc9a0a5ce8ad0b4f456c" name="a0309ee1cd3187365a87f3ec31cdfcab6a90213439b09afc9a0a5ce8ad0b4f456c"></a>AVL_VALID&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a0309ee1cd3187365a87f3ec31cdfcab6ad32d190777f333e647d291419cc18f32" name="a0309ee1cd3187365a87f3ec31cdfcab6ad32d190777f333e647d291419cc18f32"></a>AVL_BAD_CHILDREN&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a0309ee1cd3187365a87f3ec31cdfcab6a41dd57d1e518b8d92dde36f8d948bd61" name="a0309ee1cd3187365a87f3ec31cdfcab6a41dd57d1e518b8d92dde36f8d948bd61"></a>AVL_HEIGHT_VIOLATION&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a0309ee1cd3187365a87f3ec31cdfcab6adbce0ce07d0b9c156c58b3cd6d8580d6" name="a0309ee1cd3187365a87f3ec31cdfcab6adbce0ce07d0b9c156c58b3cd6d8580d6"></a>AVL_NOT_BALANCED&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a377dded21fffb51121d4313ae27ebd6e" name="a377dded21fffb51121d4313ae27ebd6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a377dded21fffb51121d4313ae27ebd6e">&#9670;&#160;</a></span>avl_copy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void avl_copy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structavl__linked.htm">avl_linked</a> **&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copies source to target.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">target</td><td>- pointer to a AVL </td></tr>
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aae57090b13d4e91d063a11904c30e3b4" name="aae57090b13d4e91d063a11904c30e3b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae57090b13d4e91d063a11904c30e3b4">&#9670;&#160;</a></span>avl_count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int avl_count </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns number of items in a AVL.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- number of items in AVL </dd></dl>

</div>
</div>
<a id="ab033d5a6f08cf6912be76b5402d8262e" name="ab033d5a6f08cf6912be76b5402d8262e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab033d5a6f08cf6912be76b5402d8262e">&#9670;&#160;</a></span>avl_empty()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool avl_empty </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines if a AVL is empty.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if the AVL is empty, false otherwise </dd></dl>

</div>
</div>
<a id="ae70c6626140a083c3eb66eb949827c16" name="ae70c6626140a083c3eb66eb949827c16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae70c6626140a083c3eb66eb949827c16">&#9670;&#160;</a></span>avl_equals()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool avl_equals </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines if two trees contain same data in same configuration.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">target</td><td>- pointer to a AVL </td></tr>
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if target is identical to source, false otherwise </dd></dl>

</div>
</div>
<a id="a5ee29acd68bdf2874982450eefeaafc1" name="a5ee29acd68bdf2874982450eefeaafc1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ee29acd68bdf2874982450eefeaafc1">&#9670;&#160;</a></span>avl_error_string()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char * avl_error_string </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>string</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="avl__linked_8h.htm#a0309ee1cd3187365a87f3ec31cdfcab6">AVL_ERROR</a>&#160;</td>
          <td class="paramname"><em>error</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns a string version of an AVL error.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">string</td><td>- destination string </td></tr>
    <tr><td class="paramname">size</td><td>- maximum size of destination string </td></tr>
    <tr><td class="paramname">source</td><td>- pointer to source data </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- pointer to string </dd></dl>

</div>
</div>
<a id="a42d1fef4963c84bb8930301efead28c9" name="a42d1fef4963c84bb8930301efead28c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42d1fef4963c84bb8930301efead28c9">&#9670;&#160;</a></span>avl_free()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void avl_free </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structavl__linked.htm">avl_linked</a> **&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Frees all parts of a AVL.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aca8d939577af3166168cd5485285ad17" name="aca8d939577af3166168cd5485285ad17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca8d939577af3166168cd5485285ad17">&#9670;&#160;</a></span>avl_full()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool avl_full </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines if a AVL is full.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if the AVL is full, false otherwise </dd></dl>

</div>
</div>
<a id="a218fda02e3c76d7889603164559878e9" name="a218fda02e3c76d7889603164559878e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a218fda02e3c76d7889603164559878e9">&#9670;&#160;</a></span>avl_initialize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structavl__linked.htm">avl_linked</a> * avl_initialize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Initializes a AVL.</p>
<dl class="section return"><dt>Returns</dt><dd>pointer to a AVL </dd></dl>

</div>
</div>
<a id="ac1fd15fc8fa5078325b724066411a101" name="ac1fd15fc8fa5078325b724066411a101"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1fd15fc8fa5078325b724066411a101">&#9670;&#160;</a></span>avl_inorder()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void avl_inorder </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *&#160;</td>
          <td class="paramname"><em>items</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copies the contents of a AVL to an array in inorder.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
    <tr><td class="paramname">items</td><td>- array of items: length must be at least size of AVL </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad0897b639673a390298a446738e8d522" name="ad0897b639673a390298a446738e8d522"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0897b639673a390298a446738e8d522">&#9670;&#160;</a></span>avl_insert()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool avl_insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Inserts a copy of an item into a AVL.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL Pointer to a AVL. </td></tr>
    <tr><td class="paramname">item</td><td>- pointer to the item to push </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if item inserted, false otherwise </dd></dl>

</div>
</div>
<a id="a1f7e48ca3e109fd2ccb65b38f8239568" name="a1f7e48ca3e109fd2ccb65b38f8239568"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f7e48ca3e109fd2ccb65b38f8239568">&#9670;&#160;</a></span>avl_leaf_count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int avl_leaf_count </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Finds the number of leaf nodes in a tree.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- count of nodes with no children. </dd></dl>

</div>
</div>
<a id="ab3d2344bfc64ca8517d37a2e04b838d5" name="ab3d2344bfc64ca8517d37a2e04b838d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3d2344bfc64ca8517d37a2e04b838d5">&#9670;&#160;</a></span>avl_max()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool avl_max </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Finds the maximum item in a AVL.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
    <tr><td class="paramname">item</td><td>- pointer to copy of maximum item </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if a maximum value is found, false otherwise (list is empty) </dd></dl>

</div>
</div>
<a id="a4e9c5eb5c25b94efcc72c9e65934c3e4" name="a4e9c5eb5c25b94efcc72c9e65934c3e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e9c5eb5c25b94efcc72c9e65934c3e4">&#9670;&#160;</a></span>avl_min()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool avl_min </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Finds the minimum item in a AVL.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
    <tr><td class="paramname">item</td><td>- pointer to copy of minimum item </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if a minimum value is found, false otherwise (list is empty) </dd></dl>

</div>
</div>
<a id="a4fd024d2ebb2c3f4ce0db7d6771e2d3b" name="a4fd024d2ebb2c3f4ce0db7d6771e2d3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4fd024d2ebb2c3f4ce0db7d6771e2d3b">&#9670;&#160;</a></span>avl_node_counts()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void avl_node_counts </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>zero</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>one</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>two</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines the number of nodes with zero, one, and two children. (May not call avl_leaf_count, avl_one_child_count, or avl_two_child_count.)</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
    <tr><td class="paramname">zero</td><td>- count of leaf nodes (no children) </td></tr>
    <tr><td class="paramname">one</td><td>- count of nodes with one child </td></tr>
    <tr><td class="paramname">two</td><td>- count of nodes with two children </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae5c3473184158a9db80a74c992835983" name="ae5c3473184158a9db80a74c992835983"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5c3473184158a9db80a74c992835983">&#9670;&#160;</a></span>avl_one_child_count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int avl_one_child_count </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Finds the number of nodes with one child in a tree.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- count of nodes with one child. </dd></dl>

</div>
</div>
<a id="ab54f807bd304760ced088759a9026798" name="ab54f807bd304760ced088759a9026798"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab54f807bd304760ced088759a9026798">&#9670;&#160;</a></span>avl_postorder()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void avl_postorder </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *&#160;</td>
          <td class="paramname"><em>items</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copies the contents of a tree to an array in postorder.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
    <tr><td class="paramname">items</td><td>- array of items: length must be at least size of AVL </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="abfd4314b277ad2c9a0b8c96092e504c1" name="abfd4314b277ad2c9a0b8c96092e504c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfd4314b277ad2c9a0b8c96092e504c1">&#9670;&#160;</a></span>avl_preorder()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void avl_preorder </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *&#160;</td>
          <td class="paramname"><em>items</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copies the contents of a AVL to an array in preorder.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
    <tr><td class="paramname">items</td><td>- array of items: length must be at least size of AVL </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6c8c077dc75e66afd1dfcbd43d77961d" name="a6c8c077dc75e66afd1dfcbd43d77961d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c8c077dc75e66afd1dfcbd43d77961d">&#9670;&#160;</a></span>avl_print()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void avl_print </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Prints the items in a AVL in preorder.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a50642cde96d52eb59ceaeb16afcbd9af" name="a50642cde96d52eb59ceaeb16afcbd9af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50642cde96d52eb59ceaeb16afcbd9af">&#9670;&#160;</a></span>avl_remove()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool avl_remove </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Removes a value matching key in a AVL.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
    <tr><td class="paramname">key</td><td>- key value to search for </td></tr>
    <tr><td class="paramname">item</td><td>- pointer to the item removed </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if item removed, false otherwise (key not found) </dd></dl>

</div>
</div>
<a id="a27e8fd44b896b789491e6ea620b20fc0" name="a27e8fd44b896b789491e6ea620b20fc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27e8fd44b896b789491e6ea620b20fc0">&#9670;&#160;</a></span>avl_retrieve()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool avl_retrieve </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Retrieves a copy of a value matching key in a AVL.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
    <tr><td class="paramname">key</td><td>- key value to search for </td></tr>
    <tr><td class="paramname">item</td><td>- pointer to copy of the item retrieved </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if item retrieved, false otherwise (key not found) </dd></dl>

</div>
</div>
<a id="af6334823fea843ff71ca5821b25a71d8" name="af6334823fea843ff71ca5821b25a71d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6334823fea843ff71ca5821b25a71d8">&#9670;&#160;</a></span>avl_two_child_count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int avl_two_child_count </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Finds the number of nodes with two children in a tree.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- count of nodes with two children </dd></dl>

</div>
</div>
<a id="a27b7354d7ad2339a38d061ae3f4c2b70" name="a27b7354d7ad2339a38d061ae3f4c2b70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27b7354d7ad2339a38d061ae3f4c2b70">&#9670;&#160;</a></span>avl_valid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="avl__linked_8h.htm#a0309ee1cd3187365a87f3ec31cdfcab6">AVL_ERROR</a> avl_valid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structavl__linked.htm">avl_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines whether or not source is a valid AVL.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a AVL </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- AVL_ERROR code </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.htm">src</a></li><li class="navelem"><a class="el" href="avl__linked_8h.htm">avl_linked.h</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.7 </li>
  </ul>
</div>
</body>
</html>
