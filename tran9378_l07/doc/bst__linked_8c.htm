<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.7"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>CP264: Lab 7: src/bst_linked.c File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">CP264: Lab 7<span id="projectnumber">&#160;2025-01-05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.7 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('bst__linked_8c.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">bst_linked.c File Reference</div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="bst__linked_8h.htm">bst_linked.h</a>&quot;</code><br />
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="define-members" name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:a0c6f9ba983ad57fd6444864653b0bdf8"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a0c6f9ba983ad57fd6444864653b0bdf8">MAX_HEIGHT</a>(a,  b)&#160;&#160;&#160;((a) &gt; (b) ? a : b)</td></tr>
<tr class="separator:a0c6f9ba983ad57fd6444864653b0bdf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:acb3252e6ad9af75896f51004ede98b7b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="bst__linked_8h.htm#ab91e75b0312ca2ef3a4e523385b6d5c4">bst_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#acb3252e6ad9af75896f51004ede98b7b">bst_node_initialize</a> (const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:acb3252e6ad9af75896f51004ede98b7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7e46f9507066433413660f21b9fd469"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#aa7e46f9507066433413660f21b9fd469">bst_node_height</a> (const <a class="el" href="bst__linked_8h.htm#ab91e75b0312ca2ef3a4e523385b6d5c4">bst_node</a> *node)</td></tr>
<tr class="separator:aa7e46f9507066433413660f21b9fd469"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43c71b5f4c669cbeeaec4016e8d96d6d"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a43c71b5f4c669cbeeaec4016e8d96d6d">bst_update_height</a> (<a class="el" href="bst__linked_8h.htm#ab91e75b0312ca2ef3a4e523385b6d5c4">bst_node</a> *node)</td></tr>
<tr class="separator:a43c71b5f4c669cbeeaec4016e8d96d6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39254a1129f47cceaf6eb0d9436eb3f4"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a39254a1129f47cceaf6eb0d9436eb3f4">bst_insert_aux</a> (<a class="el" href="structbst__linked.htm">bst_linked</a> *source, <a class="el" href="bst__linked_8h.htm#ab91e75b0312ca2ef3a4e523385b6d5c4">bst_node</a> **node, const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:a39254a1129f47cceaf6eb0d9436eb3f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dde7b5c7994aacac2591c0b6b5e42a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a6dde7b5c7994aacac2591c0b6b5e42a2">bst_initialize</a> ()</td></tr>
<tr class="separator:a6dde7b5c7994aacac2591c0b6b5e42a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5af68d21028d33b9ca8746581422b3b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#ae5af68d21028d33b9ca8746581422b3b">bst_free</a> (<a class="el" href="structbst__linked.htm">bst_linked</a> **source)</td></tr>
<tr class="separator:ae5af68d21028d33b9ca8746581422b3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6efa641d2c948a77fe47bb7c5b4c156"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#ad6efa641d2c948a77fe47bb7c5b4c156">bst_empty</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:ad6efa641d2c948a77fe47bb7c5b4c156"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a474a65b7ce8344f819964ea58af8220b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a474a65b7ce8344f819964ea58af8220b">bst_full</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:a474a65b7ce8344f819964ea58af8220b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97a78151ba2ee9dc65c0779d463cce02"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a97a78151ba2ee9dc65c0779d463cce02">bst_count</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:a97a78151ba2ee9dc65c0779d463cce02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca3ec0054542adb0680c8cb4fdb4a20d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#aca3ec0054542adb0680c8cb4fdb4a20d">bst_inorder</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *items)</td></tr>
<tr class="separator:aca3ec0054542adb0680c8cb4fdb4a20d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9988c51188dc19ac00cf37e7108113ff"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a9988c51188dc19ac00cf37e7108113ff">bst_preorder</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *items)</td></tr>
<tr class="separator:a9988c51188dc19ac00cf37e7108113ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6584e1a42dadce1471ca0e451463b4aa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a6584e1a42dadce1471ca0e451463b4aa">bst_postorder</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *items)</td></tr>
<tr class="separator:a6584e1a42dadce1471ca0e451463b4aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a442e7d45525864ec624adb05f06f5eb2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a442e7d45525864ec624adb05f06f5eb2">bst_insert</a> (<a class="el" href="structbst__linked.htm">bst_linked</a> *source, const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:a442e7d45525864ec624adb05f06f5eb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9137c3cf28cb98da7bad0d51ba0cd3c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#ae9137c3cf28cb98da7bad0d51ba0cd3c">bst_retrieve</a> (<a class="el" href="structbst__linked.htm">bst_linked</a> *source, const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> key, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:ae9137c3cf28cb98da7bad0d51ba0cd3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6162093c037ff872cf80cbe2fb6a6424"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a6162093c037ff872cf80cbe2fb6a6424">bst_remove</a> (<a class="el" href="structbst__linked.htm">bst_linked</a> *source, const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> key, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:a6162093c037ff872cf80cbe2fb6a6424"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98e78b40c1c60c9c59a902d2d788152d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a98e78b40c1c60c9c59a902d2d788152d">bst_copy</a> (<a class="el" href="structbst__linked.htm">bst_linked</a> **target, const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:a98e78b40c1c60c9c59a902d2d788152d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac43a1b10c297268b1525a67591dfeee2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#ac43a1b10c297268b1525a67591dfeee2">bst_max</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:ac43a1b10c297268b1525a67591dfeee2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ad92f94cbae302abac352e09b0c2f7b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a2ad92f94cbae302abac352e09b0c2f7b">bst_min</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:a2ad92f94cbae302abac352e09b0c2f7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9751875df4515840566a2f41336054dc"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a9751875df4515840566a2f41336054dc">bst_leaf_count</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:a9751875df4515840566a2f41336054dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af74f183ae675b6fdcc1d1feb8c49602e"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#af74f183ae675b6fdcc1d1feb8c49602e">bst_one_child_count</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:af74f183ae675b6fdcc1d1feb8c49602e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af164f2d603caf92d9b247e4e78aa867b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#af164f2d603caf92d9b247e4e78aa867b">bst_two_child_count</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:af164f2d603caf92d9b247e4e78aa867b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac80910535346660f4628b104aa3d63ce"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#ac80910535346660f4628b104aa3d63ce">bst_node_counts</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source, int *zero, int *one, int *two)</td></tr>
<tr class="separator:ac80910535346660f4628b104aa3d63ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a247dba4975ed5848f7eb7498fc96c577"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a247dba4975ed5848f7eb7498fc96c577">bst_balanced</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:a247dba4975ed5848f7eb7498fc96c577"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafc2dba81017e624cbae8caf84be9462"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#aafc2dba81017e624cbae8caf84be9462">bst_valid</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:aafc2dba81017e624cbae8caf84be9462"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e508f9b4cf204a1c9998203b9dafaf2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a2e508f9b4cf204a1c9998203b9dafaf2">bst_equals</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *target, const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:a2e508f9b4cf204a1c9998203b9dafaf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad52e3ace9496571c1bbe691121215fe0"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#ad52e3ace9496571c1bbe691121215fe0">bst_print_aux</a> (<a class="el" href="bst__linked_8h.htm#ab91e75b0312ca2ef3a4e523385b6d5c4">bst_node</a> *node)</td></tr>
<tr class="separator:ad52e3ace9496571c1bbe691121215fe0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06ae39906ea3559a8d085a82fefe37cc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8c.htm#a06ae39906ea3559a8d085a82fefe37cc">bst_print</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:a06ae39906ea3559a8d085a82fefe37cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><hr  />
<h2><a class="anchor" id="autotoc_md1"></a>
Linked BST Source Code File</h2>
<dl class="section author"><dt>Author</dt><dd>David Brown, 123456789, <a href="#" onclick="location.href='mai'+'lto:'+'dbr'+'ow'+'n@w'+'lu'+'.ca'; return false;">dbrow<span class="obfuscator">.nosp@m.</span>n@wl<span class="obfuscator">.nosp@m.</span>u.ca</a></dd></dl>
<dl class="section version"><dt>Version</dt><dd>2025-01-06</dd></dl>
<hr  />
 </div><h2 class="groupheader">Macro Definition Documentation</h2>
<a id="a0c6f9ba983ad57fd6444864653b0bdf8" name="a0c6f9ba983ad57fd6444864653b0bdf8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c6f9ba983ad57fd6444864653b0bdf8">&#9670;&#160;</a></span>MAX_HEIGHT</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MAX_HEIGHT</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">a, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">b&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;((a) &gt; (b) ? a : b)</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a247dba4975ed5848f7eb7498fc96c577" name="a247dba4975ed5848f7eb7498fc96c577"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a247dba4975ed5848f7eb7498fc96c577">&#9670;&#160;</a></span>bst_balanced()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bst_balanced </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines whether or not a tree is a balanced tree. All node heights are no more than one greater than any child heights.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if source is balanced, false otherwise </dd></dl>

</div>
</div>
<a id="a98e78b40c1c60c9c59a902d2d788152d" name="a98e78b40c1c60c9c59a902d2d788152d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98e78b40c1c60c9c59a902d2d788152d">&#9670;&#160;</a></span>bst_copy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bst_copy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structbst__linked.htm">bst_linked</a> **&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copies source to target.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">target</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a97a78151ba2ee9dc65c0779d463cce02" name="a97a78151ba2ee9dc65c0779d463cce02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97a78151ba2ee9dc65c0779d463cce02">&#9670;&#160;</a></span>bst_count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bst_count </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns number of items in a BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- number of items in BST </dd></dl>

</div>
</div>
<a id="ad6efa641d2c948a77fe47bb7c5b4c156" name="ad6efa641d2c948a77fe47bb7c5b4c156"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6efa641d2c948a77fe47bb7c5b4c156">&#9670;&#160;</a></span>bst_empty()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bst_empty </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines if a BST is empty.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the BST is empty, false otherwise </dd></dl>

</div>
</div>
<a id="a2e508f9b4cf204a1c9998203b9dafaf2" name="a2e508f9b4cf204a1c9998203b9dafaf2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e508f9b4cf204a1c9998203b9dafaf2">&#9670;&#160;</a></span>bst_equals()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bst_equals </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines if two trees contain same data in same configuration.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">target</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if target is identical to source, false otherwise </dd></dl>

</div>
</div>
<a id="ae5af68d21028d33b9ca8746581422b3b" name="ae5af68d21028d33b9ca8746581422b3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5af68d21028d33b9ca8746581422b3b">&#9670;&#160;</a></span>bst_free()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bst_free </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structbst__linked.htm">bst_linked</a> **&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Destroys a BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a474a65b7ce8344f819964ea58af8220b" name="a474a65b7ce8344f819964ea58af8220b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a474a65b7ce8344f819964ea58af8220b">&#9670;&#160;</a></span>bst_full()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bst_full </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines if a BST is full.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if the BST is full, false otherwise </dd></dl>

</div>
</div>
<a id="a6dde7b5c7994aacac2591c0b6b5e42a2" name="a6dde7b5c7994aacac2591c0b6b5e42a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dde7b5c7994aacac2591c0b6b5e42a2">&#9670;&#160;</a></span>bst_initialize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structbst__linked.htm">bst_linked</a> * bst_initialize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">destroy</td><td>The destroy function for the BST data. </td></tr>
    <tr><td class="paramname">copy</td><td>The copy function for the BST data. </td></tr>
    <tr><td class="paramname">to_string</td><td>The to string function for the BST data. </td></tr>
    <tr><td class="paramname">data_compare</td><td>The comparison function for the BST data. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to a new BST. Initializes a BST.</dd>
<dd>
pointer to a bst </dd></dl>

</div>
</div>
<a id="aca3ec0054542adb0680c8cb4fdb4a20d" name="aca3ec0054542adb0680c8cb4fdb4a20d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca3ec0054542adb0680c8cb4fdb4a20d">&#9670;&#160;</a></span>bst_inorder()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bst_inorder </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *&#160;</td>
          <td class="paramname"><em>items</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a442e7d45525864ec624adb05f06f5eb2" name="a442e7d45525864ec624adb05f06f5eb2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a442e7d45525864ec624adb05f06f5eb2">&#9670;&#160;</a></span>bst_insert()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bst_insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Inserts a copy of an item into a BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST Pointer to a BST. </td></tr>
    <tr><td class="paramname">item</td><td>- pointer to the item to push </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if item inserted, false otherwise </dd></dl>

</div>
</div>
<a id="a39254a1129f47cceaf6eb0d9436eb3f4" name="a39254a1129f47cceaf6eb0d9436eb3f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39254a1129f47cceaf6eb0d9436eb3f4">&#9670;&#160;</a></span>bst_insert_aux()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool bst_insert_aux </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bst__linked_8h.htm#ab91e75b0312ca2ef3a4e523385b6d5c4">bst_node</a> **&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Inserts item into a BST. Insertion must preserve the BST definition. item may appear only once in source.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">node</td><td>- pointer to a node </td></tr>
    <tr><td class="paramname">item</td><td>- the item to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if item inserted, false otherwise </dd></dl>

</div>
</div>
<a id="a9751875df4515840566a2f41336054dc" name="a9751875df4515840566a2f41336054dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9751875df4515840566a2f41336054dc">&#9670;&#160;</a></span>bst_leaf_count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bst_leaf_count </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Finds the number of leaf nodes in a tree.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- count of nodes with no children. </dd></dl>

</div>
</div>
<a id="ac43a1b10c297268b1525a67591dfeee2" name="ac43a1b10c297268b1525a67591dfeee2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac43a1b10c297268b1525a67591dfeee2">&#9670;&#160;</a></span>bst_max()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bst_max </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Finds the maximum item in a BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if a maximum value is found, false otherwise (list is empty) </dd></dl>

</div>
</div>
<a id="a2ad92f94cbae302abac352e09b0c2f7b" name="a2ad92f94cbae302abac352e09b0c2f7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ad92f94cbae302abac352e09b0c2f7b">&#9670;&#160;</a></span>bst_min()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bst_min </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Finds the minimum item in a BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if a minimum value is found, false otherwise (list is empty) </dd></dl>

</div>
</div>
<a id="ac80910535346660f4628b104aa3d63ce" name="ac80910535346660f4628b104aa3d63ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac80910535346660f4628b104aa3d63ce">&#9670;&#160;</a></span>bst_node_counts()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bst_node_counts </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>zero</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>one</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>two</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines the number of nodes with zero, one, and two children. (May not call bst_leaf_count, bst_one_child_count, or bst_two_child_count.)</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">zero</td><td>- count of leaf nodes (no children) </td></tr>
    <tr><td class="paramname">one</td><td>- count of nodes with one child </td></tr>
    <tr><td class="paramname">two</td><td>- count of nodes with two children </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa7e46f9507066433413660f21b9fd469" name="aa7e46f9507066433413660f21b9fd469"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7e46f9507066433413660f21b9fd469">&#9670;&#160;</a></span>bst_node_height()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int bst_node_height </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="bst__linked_8h.htm#ab91e75b0312ca2ef3a4e523385b6d5c4">bst_node</a> *&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Helper function to determine the height of node - handles empty node. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">node</td><td>The node to process. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The height of the current node. </dd></dl>

</div>
</div>
<a id="acb3252e6ad9af75896f51004ede98b7b" name="acb3252e6ad9af75896f51004ede98b7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb3252e6ad9af75896f51004ede98b7b">&#9670;&#160;</a></span>bst_node_initialize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="bst__linked_8h.htm#ab91e75b0312ca2ef3a4e523385b6d5c4">bst_node</a> * bst_node_initialize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Initializes a new BST node with a copy of item.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>pointer to a BST source </td></tr>
    <tr><td class="paramname">item</td><td>pointer to the item to assign to the node </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pointer to a new BST node </dd></dl>

</div>
</div>
<a id="af74f183ae675b6fdcc1d1feb8c49602e" name="af74f183ae675b6fdcc1d1feb8c49602e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af74f183ae675b6fdcc1d1feb8c49602e">&#9670;&#160;</a></span>bst_one_child_count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bst_one_child_count </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Finds the number of nodes with one child in a tree.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- count of nodes with one child. </dd></dl>

</div>
</div>
<a id="a6584e1a42dadce1471ca0e451463b4aa" name="a6584e1a42dadce1471ca0e451463b4aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6584e1a42dadce1471ca0e451463b4aa">&#9670;&#160;</a></span>bst_postorder()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bst_postorder </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *&#160;</td>
          <td class="paramname"><em>items</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9988c51188dc19ac00cf37e7108113ff" name="a9988c51188dc19ac00cf37e7108113ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9988c51188dc19ac00cf37e7108113ff">&#9670;&#160;</a></span>bst_preorder()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bst_preorder </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *&#160;</td>
          <td class="paramname"><em>items</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a06ae39906ea3559a8d085a82fefe37cc" name="a06ae39906ea3559a8d085a82fefe37cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06ae39906ea3559a8d085a82fefe37cc">&#9670;&#160;</a></span>bst_print()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bst_print </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Prints the items in a BST in preorder.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad52e3ace9496571c1bbe691121215fe0" name="ad52e3ace9496571c1bbe691121215fe0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad52e3ace9496571c1bbe691121215fe0">&#9670;&#160;</a></span>bst_print_aux()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void bst_print_aux </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="bst__linked_8h.htm#ab91e75b0312ca2ef3a4e523385b6d5c4">bst_node</a> *&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Private helper function to print contents of BS in preorder.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">to_string</td><td>- function to print data_ptr </td></tr>
    <tr><td class="paramname">node</td><td>- pointer to bst_node </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6162093c037ff872cf80cbe2fb6a6424" name="a6162093c037ff872cf80cbe2fb6a6424"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6162093c037ff872cf80cbe2fb6a6424">&#9670;&#160;</a></span>bst_remove()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bst_remove </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Removes a value matching key in a BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">key</td><td>- key value to search for </td></tr>
    <tr><td class="paramname">item</td><td>- pointer to the item to remove </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if item removed, false otherwise (key not found) </dd></dl>

</div>
</div>
<a id="ae9137c3cf28cb98da7bad0d51ba0cd3c" name="ae9137c3cf28cb98da7bad0d51ba0cd3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9137c3cf28cb98da7bad0d51ba0cd3c">&#9670;&#160;</a></span>bst_retrieve()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bst_retrieve </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Retrieves a copy of a value matching key in a BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">key</td><td>- key value to search for </td></tr>
    <tr><td class="paramname">item</td><td>- pointer to the item to retrieve </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if item retrieved, false otherwise (key not found) </dd></dl>

</div>
</div>
<a id="af164f2d603caf92d9b247e4e78aa867b" name="af164f2d603caf92d9b247e4e78aa867b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af164f2d603caf92d9b247e4e78aa867b">&#9670;&#160;</a></span>bst_two_child_count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bst_two_child_count </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Finds the number of nodes with two children in a tree.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- count of nodes with two children </dd></dl>

</div>
</div>
<a id="a43c71b5f4c669cbeeaec4016e8d96d6d" name="a43c71b5f4c669cbeeaec4016e8d96d6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43c71b5f4c669cbeeaec4016e8d96d6d">&#9670;&#160;</a></span>bst_update_height()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void bst_update_height </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="bst__linked_8h.htm#ab91e75b0312ca2ef3a4e523385b6d5c4">bst_node</a> *&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Updates the height of a node. Its height is the max of the heights of its child nodes, plus 1. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">node</td><td>The node to process. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aafc2dba81017e624cbae8caf84be9462" name="aafc2dba81017e624cbae8caf84be9462"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aafc2dba81017e624cbae8caf84be9462">&#9670;&#160;</a></span>bst_valid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bst_valid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines whether or not a tree is a valid BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if source is valid, false otherwise </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.htm">src</a></li><li class="navelem"><a class="el" href="bst__linked_8c.htm">bst_linked.c</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.7 </li>
  </ul>
</div>
</body>
</html>
